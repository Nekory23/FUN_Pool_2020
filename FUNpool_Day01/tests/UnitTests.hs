import Test.HUnit
import My

tests = TestList ["mySucc : add 1 to 89" ~: 90 ~=? (mySucc 89),
                  "myIsNeg : not negative" ~: False ~=? (myIsNeg 8),
                  "myIsNeg : negative" ~: True ~=? (myIsNeg (-5)),
                  "myAbs : negative number" ~: 5 ~=? (myAbs (-5)),
                  "myAbs : positive number" ~: 5 ~=? (myAbs 5),
                  "myMin : second" ~: 1 ~=? (myMin 4 1),
                  "myMin : first" ~: 1 ~=? (myMin 1 4),
                  "myMax : second" ~: 4 ~=? (myMax 1 4),
                  "myMax : first" ~: 4 ~=? (myMax 4 1),
                  "myTuple :" ~: (1, 2) ~=? (myTuple 1 2),
                  "myTruple :" ~: (1, 2, 3) ~=? (myTruple 1 2 3),
                  "myFst :" ~: 1 ~=? (myFst (1, 2)),
                  "mySnd :" ~: 2 ~=? (mySnd (1, 2)),
                  "mySwap :" ~: (2, 1) ~=? (mySwap (1, 2)),
                  "myHead :" ~: 1 ~=? (myHead [1, 2, 3, 4]),
                  --"myHead : empty list" ~: "The list is empty" ~=? (myHead []),
                  "myTail :" ~: [2, 3, 4] ~=? (myTail [1, 2, 3, 4]),
                  --"myTail : empty list" ~: "The list is empty" ~=? (myTail []),
                  "myLength :" ~: 5 ~=? (myLength [1, 2, 3, 4, 5]),
                  "myLength :" ~: 0 ~=? (myLength []),
                  "myNth :" ~: 1 ~=? (myNth [1, 2, 3, 4] 0),
                  "myNth :" ~: 3 ~=? (myNth [1, 2, 3, 4] 2),
                  --"myNth : empty list" ~: "The list is empty" ~=? (myNth [] 2),
                  --"myNth : index too big" ~: "The index is too big" ~=? (myNth [1, 2, 3, 4] 76),
                  --"myNth : negative index" ~: "The index must be a positive number" ~=? (myNth [1, 2, 3, 4] (-7)),
                  "myTake : take 3" ~: [1, 2, 3] ~=? (myTake 3 [1, 2, 3, 4, 5]),
                  "myTake : take 0" ~: [] ~=? (myTake 0 [1, 2, 3, 4, 5]),
                  "myTake : take too much" ~: [1, 2, 3, 4, 5] ~=? (myTake 67 [1, 2, 3, 4, 5]),
                  --"myTake : empty list" ~: "The list is empty" ~=? (myTake 2 []),
                  --"myTake : negative index" ~: "The index must be positive" ~=? (myTake (-5) [1, 2, 3, 4],
                  "myDrop : drop 0" ~: [1, 2, 3] ~=? (myDrop 0 [1, 2, 3]),
                  "myDrop : drop 1" ~: [2, 3, 4] ~=? (myDrop 1 [1, 2, 3, 4]),
                  "myDrop : drop too much" ~: [] ~=? (myDrop 27 [1, 2, 3]),
                  --"myDrop : empty list" ~: "The list is empty" ~=? (myDrop 2 []),
                  --"myDrop : negative index" ~: "The index must be positive" ~=? (myDrop (-5) [1, 2, 3, 4]),
                  "myAppend :" ~: [1, 2, 3, 4] ~=? (myAppend [1, 2] [3, 4]),
                  "myReverse :" ~: [3, 2, 1] ~=? (myReverse [1, 2, 3]),
                  "myInit :" ~: [1, 2] ~=? (myInit [1, 2, 3]),
                  --"myInit : empty list" ~: "The list is empty" ~=? (myInit []),
                  "myLast :" ~: 3 ~=? (myLast [1, 2, 3]),
                  --"myLast : empty list" ~: "The list is empty" ~=? (myLast []),
                  "myZip :" ~: [(0, 3), (1, 4), (2, 5), (3, 6)] ~=? (myZip [0, 1, 2, 3] [3, 4, 5, 6]),
                  --"myZip : empty lists" ~: [] ~=? (myZip [] []),
                  --"myZip : first list empty" ~: [] ~=? (myZip [] [1, 2, 3]),
                  --"myZip : second list empty" ~: [] ~=? (myZip [1, 2, 3] []),
                  "myUnzip :" ~: ([1, 2, 3], [4, 5, 6]) ~=? (myUnzip [(1, 4), (2, 5), (3, 6)])
                  --"myUnzip : empty list" ~: ([], []) ~=? (myUnzip []),
                 ]

--main :: IO Counts
--main = runTestTT tests